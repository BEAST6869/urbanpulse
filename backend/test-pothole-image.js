const fs = require('fs');
const path = require('path');
const AIClassificationService = require('./services/aiClassificationService');

async function testPotholeClassification() {
  console.log('üß™ Testing Pothole Image Classification...\n');

  try {
    // Initialize the AI service
    console.log('üîß Initializing AI Classification Service...');
    const aiService = AIClassificationService; // It's already a singleton instance
    await aiService.initialize();
    console.log('‚úÖ AI service initialized\n');

    // Check if the pothole image exists
    const imagePath = path.join(__dirname, 'pothole-test.jpg');
    if (!fs.existsSync(imagePath)) {
      console.error('‚ùå Pothole test image not found at:', imagePath);
      console.log('Please save the pothole image as "pothole-test.jpg" in the backend directory');
      return;
    }

    // Load the image
    console.log('üì∑ Loading pothole image...');
    const imageBuffer = fs.readFileSync(imagePath);
    console.log(`üìä Image size: ${imageBuffer.length} bytes\n`);

    // Classify the image
    console.log('üß† Classifying pothole image...');
    const startTime = Date.now();
    const result = await aiService.classifyImage(imageBuffer);
    const totalTime = Date.now() - startTime;

    console.log('üéØ Classification Results:');
    console.log('=' .repeat(50));
    console.log(`üè∑Ô∏è  Predicted Category: ${result.category}`);
    console.log(`üé¢ Backend Category: ${result.backendCategory}`);
    console.log(`üìà Confidence: ${result.confidence.toFixed(4)} (${(result.confidence * 100).toFixed(2)}%)`);
    console.log(`‚è±Ô∏è  Processing Time: ${result.processingTime}ms`);
    console.log(`üîç Classification Method: ${result.source}`);
    console.log(`üéØ Confidence Threshold: ${result.threshold}`);
    console.log(`‚è∞ Total Time: ${totalTime}ms\n`);

    console.log('üìä Extracted Features:');
    if (result.features) {
      console.log(`   üí° Brightness: ${result.features.brightness.toFixed(4)}`);
      console.log(`   üìä Variance: ${result.features.variance.toFixed(4)}`);
      console.log(`   üîÜ Contrast: ${result.features.contrast.toFixed(4)}`);
      console.log(`   üé® Dominant Color: ${result.features.colorDistribution.dominantColor}`);
      console.log(`   üî¥ Red Channel: ${result.features.colorDistribution.red.toFixed(4)}`);
      console.log(`   üü¢ Green Channel: ${result.features.colorDistribution.green.toFixed(4)}`);
      console.log(`   üîµ Blue Channel: ${result.features.colorDistribution.blue.toFixed(4)}`);
      console.log(`   üßÆ Complexity: ${result.features.complexity.toFixed(4)}\n`);
    }

    console.log('üèÜ Top 5 Predictions:');
    result.allPredictions.slice(0, 5).forEach((pred, index) => {
      const icon = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
      console.log(`   ${icon} ${pred.category}: ${(pred.confidence * 100).toFixed(2)}% (${pred.backendCategory})`);
    });

    // Analysis
    console.log('\nüîç Analysis:');
    const isPotholeCorrect = result.category === 'pothole' || 
                            (result.allPredictions[0]?.category === 'pothole' && result.allPredictions[0]?.confidence > 0.3);
    
    if (isPotholeCorrect) {
      console.log('‚úÖ SUCCESS: The image was correctly classified as pothole-related!');
    } else {
      console.log('‚ö†Ô∏è  The image was not classified as pothole. Let\'s analyze why:');
      
      const potholePredict = result.allPredictions.find(p => p.category === 'pothole');
      if (potholePredict) {
        console.log(`   ‚Ä¢ Pothole confidence was ${(potholePredict.confidence * 100).toFixed(2)}% (rank ${result.allPredictions.indexOf(potholePredict) + 1})`);
      } else {
        console.log('   ‚Ä¢ Pothole was not in the prediction list');
      }
      
      console.log(`   ‚Ä¢ Top prediction: ${result.allPredictions[0]?.category} at ${(result.allPredictions[0]?.confidence * 100).toFixed(2)}%`);
      console.log(`   ‚Ä¢ Confidence threshold: ${(result.threshold * 100)}%`);
    }

    console.log('\nüéâ Pothole classification test completed!');
    
  } catch (error) {
    console.error('‚ùå Error during pothole classification test:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Run the test
testPotholeClassification();
